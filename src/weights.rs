
//! Autogenerated weights for `pallet_collator_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-09-25, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `PAR03651`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("local-v")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/mythos-node
// benchmark
// pallet
// --chain
// local-v
// --pallet
// pallet_collator_staking
// --extrinsic
// *
// --wasm-execution
// compiled
// --steps
// 50
// --repeat
// 20
// --output
// ./runtime/testnet/src/weights/pallet_collator_staking.rs
// --template
// .maintain/template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_collator_staking`.
pub trait WeightInfo {
	fn set_invulnerables(b: u32, ) -> Weight;
	fn add_invulnerable(b: u32, ) -> Weight;
	fn remove_invulnerable(b: u32, ) -> Weight;
	fn set_desired_candidates() -> Weight;
	fn set_min_candidacy_bond() -> Weight;
	fn register_as_candidate() -> Weight;
	fn remove_worst_candidate() -> Weight;
	fn leave_intent() -> Weight;
	fn note_author() -> Weight;
	fn new_session(r: u32, c: u32, ) -> Weight;
	fn stake(c: u32, ) -> Weight;
	fn unstake_from() -> Weight;
	fn unstake_all(s: u32, ) -> Weight;
	fn release(c: u32, ) -> Weight;
	fn claim_rewards(c: u32, r: u32, ) -> Weight;
	fn set_autocompound_percentage(s: u32, ) -> Weight;
	fn set_collator_reward_percentage() -> Weight;
	fn set_extra_reward() -> Weight;
	fn set_minimum_stake() -> Weight;
	fn stop_extra_reward() -> Weight;
	fn top_up_extra_rewards() -> Weight;
	fn start_session() -> Weight;
	fn end_session(c: u32, ) -> Weight;
	fn update_candidacy_bond() -> Weight;
	fn lock() -> Weight;
	fn unlock() -> Weight;
}

/// Weights for `pallet_collator_staking` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
	impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `CollatorStaking::Candidates` (r:20 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:20 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::Invulnerables` (r:0 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 20]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `418 + b * (65 ±0)`
		//  Estimated: `1408 + b * (2540 ±0)`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(8_774_843, 1408)
			// Standard Error: 5_729
			.saturating_add(Weight::from_parts(4_159_396, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 19]`.
	fn add_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `466 + b * (38 ±0)`
		//  Estimated: `3938 + b * (38 ±0)`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_278_499, 3938)
			// Standard Error: 3_478
			.saturating_add(Weight::from_parts(116_964, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(b.into()))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 20]`.
	fn remove_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212 + b * (20 ±0)`
		//  Estimated: `1886`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(9_436_414, 1886)
			// Standard Error: 3_022
			.saturating_add(Weight::from_parts(50_150, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::DesiredCandidates` (r:0 w:1)
	/// Proof: `CollatorStaking::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:0 w:1)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_min_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:1 w:0)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn register_as_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `562`
		//  Estimated: `4752`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(44_000_000, 4752)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorStaking::Candidates` (r:101 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:100 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_worst_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `12651`
		//  Estimated: `342190`
		// Minimum execution time: 619_000_000 picoseconds.
		Weight::from_parts(622_000_000, 342190)
			.saturating_add(T::DbWeight::get().reads(205_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn leave_intent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `522`
		//  Estimated: `4752`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(53_000_000, 4752)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ProducedBlocks` (r:1 w:1)
	/// Proof: `CollatorStaking::ProducedBlocks` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::TotalBlocks` (r:1 w:1)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248`
		//  Estimated: `3505`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 3505)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:101 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:100 w:0)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:100 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::DesiredCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:97 w:97)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:97 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ReleaseQueues` (r:97 w:97)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 100]`.
	/// The range of component `c` is `[1, 100]`.
	fn new_session(r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285 + c * (159 ±0) + r * (122 ±0)`
		//  Estimated: `3521 + c * (3412 ±0) + r * (3762 ±0)`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(25_000_000, 3521)
			// Standard Error: 626_252
			.saturating_add(Weight::from_parts(27_635_711, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 3412).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(r.into()))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:16 w:16)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:16 w:16)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	fn stake(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `417 + c * (94 ±0)`
		//  Estimated: `4402 + c * (2567 ±0)`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(12_067_349, 4402)
			// Standard Error: 19_218
			.saturating_add(Weight::from_parts(14_194_594, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompound` (r:1 w:0)
	/// Proof: `CollatorStaking::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn unstake_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `626`
		//  Estimated: `3843`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(27_000_000, 3843)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:16 w:16)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompound` (r:1 w:0)
	/// Proof: `CollatorStaking::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:16 w:16)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 16]`.
	fn unstake_all(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `484 + s * (180 ±0)`
		//  Estimated: `3843 + s * (2567 ±0)`
		// Minimum execution time: 27_000_000 picoseconds.
		Weight::from_parts(15_036_437, 3843)
			// Standard Error: 23_527
			.saturating_add(Weight::from_parts(13_271_765, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(s.into()))
	}
	/// Storage: `CollatorStaking::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	fn release(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `346 + c * (20 ±0)`
		//  Estimated: `4752`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(24_647_099, 4752)
			// Standard Error: 5_102
			.saturating_add(Weight::from_parts(69_438, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:16 w:16)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::PerSessionRewards` (r:502 w:0)
	/// Proof: `CollatorStaking::PerSessionRewards` (`max_values`: None, `max_size`: Some(5238), added: 7713, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompound` (r:1 w:0)
	/// Proof: `CollatorStaking::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:16 w:16)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	/// The range of component `r` is `[1, 500]`.
	fn claim_rewards(c: u32, r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2413 + c * (280 ±0) + r * (5245 ±0)`
		//  Estimated: `16416 + c * (2567 ±0) + r * (7713 ±0)`
		// Minimum execution time: 394_000_000 picoseconds.
		Weight::from_parts(397_000_000, 16416)
			// Standard Error: 1_010_029
			.saturating_add(Weight::from_parts(30_045_214, 0).saturating_mul(c.into()))
			// Standard Error: 32_221
			.saturating_add(Weight::from_parts(8_304_701, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 7713).saturating_mul(r.into()))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:16 w:0)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompound` (r:1 w:1)
	/// Proof: `CollatorStaking::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 16]`.
	fn set_autocompound_percentage(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `470 + s * (118 ±0)`
		//  Estimated: `3843 + s * (2567 ±0)`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(17_460_423, 3843)
			// Standard Error: 7_019
			.saturating_add(Weight::from_parts(3_632_366, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(s.into()))
	}
	/// Storage: `CollatorStaking::CollatorRewardPercentage` (r:0 w:1)
	/// Proof: `CollatorStaking::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_collator_reward_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:0 w:1)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:0 w:1)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_minimum_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `267`
		//  Estimated: `1501`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_000_000, 1501)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:1 w:1)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn stop_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `312`
		//  Estimated: `3581`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_000_000, 3581)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn top_up_extra_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3581`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(36_000_000, 3581)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::TotalBlocks` (r:0 w:1)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:0 w:1)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn start_session() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(1_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:1 w:0)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CounterForPerSessionRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForPerSessionRewards` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:101 w:101)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::TotalBlocks` (r:1 w:0)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CollatorRewardPercentage` (r:1 w:0)
	/// Proof: `CollatorStaking::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ProducedBlocks` (r:101 w:100)
	/// Proof: `CollatorStaking::ProducedBlocks` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:100 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::PerSessionRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::PerSessionRewards` (`max_values`: None, `max_size`: Some(5238), added: 7713, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn end_session(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `553 + c * (261 ±0)`
		//  Estimated: `8703 + c * (2591 ±0)`
		// Minimum execution time: 58_000_000 picoseconds.
		Weight::from_parts(15_253_943, 8703)
			// Standard Error: 64_085
			.saturating_add(Weight::from_parts(39_129_389, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(c.into()))
	}
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn update_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `514`
		//  Estimated: `4752`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(35_000_000, 4752)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `4752`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(25_000_000, 4752)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:0)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `280`
		//  Estimated: `4752`
		// Minimum execution time: 39_000_000 picoseconds.
		Weight::from_parts(40_000_000, 4752)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `CollatorStaking::Candidates` (r:20 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:20 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::Invulnerables` (r:0 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 20]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `418 + b * (65 ±0)`
		//  Estimated: `1408 + b * (2540 ±0)`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(8_774_843, 1408)
			// Standard Error: 5_729
			.saturating_add(Weight::from_parts(4_159_396, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 19]`.
	fn add_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `466 + b * (38 ±0)`
		//  Estimated: `3938 + b * (38 ±0)`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_278_499, 3938)
			// Standard Error: 3_478
			.saturating_add(Weight::from_parts(116_964, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(b.into()))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 20]`.
	fn remove_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212 + b * (20 ±0)`
		//  Estimated: `1886`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(9_436_414, 1886)
			// Standard Error: 3_022
			.saturating_add(Weight::from_parts(50_150, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::DesiredCandidates` (r:0 w:1)
	/// Proof: `CollatorStaking::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:0 w:1)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_min_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:1 w:0)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn register_as_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `562`
		//  Estimated: `4752`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(44_000_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorStaking::Candidates` (r:101 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:100 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_worst_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `12651`
		//  Estimated: `342190`
		// Minimum execution time: 619_000_000 picoseconds.
		Weight::from_parts(622_000_000, 342190)
			.saturating_add(RocksDbWeight::get().reads(205_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn leave_intent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `522`
		//  Estimated: `4752`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(53_000_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ProducedBlocks` (r:1 w:1)
	/// Proof: `CollatorStaking::ProducedBlocks` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::TotalBlocks` (r:1 w:1)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248`
		//  Estimated: `3505`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 3505)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:101 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:100 w:0)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:100 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::DesiredCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:97 w:97)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:97 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ReleaseQueues` (r:97 w:97)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 100]`.
	/// The range of component `c` is `[1, 100]`.
	fn new_session(r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285 + c * (159 ±0) + r * (122 ±0)`
		//  Estimated: `3521 + c * (3412 ±0) + r * (3762 ±0)`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(25_000_000, 3521)
			// Standard Error: 626_252
			.saturating_add(Weight::from_parts(27_635_711, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 3412).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(r.into()))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:16 w:16)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:16 w:16)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	fn stake(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `417 + c * (94 ±0)`
		//  Estimated: `4402 + c * (2567 ±0)`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(12_067_349, 4402)
			// Standard Error: 19_218
			.saturating_add(Weight::from_parts(14_194_594, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompound` (r:1 w:0)
	/// Proof: `CollatorStaking::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn unstake_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `626`
		//  Estimated: `3843`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(27_000_000, 3843)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:16 w:16)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompound` (r:1 w:0)
	/// Proof: `CollatorStaking::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:16 w:16)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 16]`.
	fn unstake_all(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `484 + s * (180 ±0)`
		//  Estimated: `3843 + s * (2567 ±0)`
		// Minimum execution time: 27_000_000 picoseconds.
		Weight::from_parts(15_036_437, 3843)
			// Standard Error: 23_527
			.saturating_add(Weight::from_parts(13_271_765, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(s.into()))
	}
	/// Storage: `CollatorStaking::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	fn release(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `346 + c * (20 ±0)`
		//  Estimated: `4752`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(24_647_099, 4752)
			// Standard Error: 5_102
			.saturating_add(Weight::from_parts(69_438, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:16 w:16)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::PerSessionRewards` (r:502 w:0)
	/// Proof: `CollatorStaking::PerSessionRewards` (`max_values`: None, `max_size`: Some(5238), added: 7713, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompound` (r:1 w:0)
	/// Proof: `CollatorStaking::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:16 w:16)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	/// The range of component `r` is `[1, 500]`.
	fn claim_rewards(c: u32, r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2413 + c * (280 ±0) + r * (5245 ±0)`
		//  Estimated: `16416 + c * (2567 ±0) + r * (7713 ±0)`
		// Minimum execution time: 394_000_000 picoseconds.
		Weight::from_parts(397_000_000, 16416)
			// Standard Error: 1_010_029
			.saturating_add(Weight::from_parts(30_045_214, 0).saturating_mul(c.into()))
			// Standard Error: 32_221
			.saturating_add(Weight::from_parts(8_304_701, 0).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 7713).saturating_mul(r.into()))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:16 w:0)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompound` (r:1 w:1)
	/// Proof: `CollatorStaking::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 16]`.
	fn set_autocompound_percentage(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `470 + s * (118 ±0)`
		//  Estimated: `3843 + s * (2567 ±0)`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(17_460_423, 3843)
			// Standard Error: 7_019
			.saturating_add(Weight::from_parts(3_632_366, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(s.into()))
	}
	/// Storage: `CollatorStaking::CollatorRewardPercentage` (r:0 w:1)
	/// Proof: `CollatorStaking::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_collator_reward_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:0 w:1)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:0 w:1)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_minimum_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `267`
		//  Estimated: `1501`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_000_000, 1501)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:1 w:1)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn stop_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `312`
		//  Estimated: `3581`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(11_000_000, 3581)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn top_up_extra_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3581`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(36_000_000, 3581)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::TotalBlocks` (r:0 w:1)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:0 w:1)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn start_session() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(1_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:1 w:0)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CounterForPerSessionRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForPerSessionRewards` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:101 w:101)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::TotalBlocks` (r:1 w:0)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CollatorRewardPercentage` (r:1 w:0)
	/// Proof: `CollatorStaking::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ProducedBlocks` (r:101 w:100)
	/// Proof: `CollatorStaking::ProducedBlocks` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:100 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::PerSessionRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::PerSessionRewards` (`max_values`: None, `max_size`: Some(5238), added: 7713, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn end_session(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `553 + c * (261 ±0)`
		//  Estimated: `8703 + c * (2591 ±0)`
		// Minimum execution time: 58_000_000 picoseconds.
		Weight::from_parts(15_253_943, 8703)
			// Standard Error: 64_085
			.saturating_add(Weight::from_parts(39_129_389, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(c.into()))
	}
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn update_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `514`
		//  Estimated: `4752`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(35_000_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `4752`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(25_000_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:0)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `280`
		//  Estimated: `4752`
		// Minimum execution time: 39_000_000 picoseconds.
		Weight::from_parts(40_000_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
