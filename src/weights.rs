
// Copyright (C) BlockDeep Labs UG.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_collator_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-09-30, STEPS: `10`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `pop-os`, CPU: `11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./target/release/mythos-node
// benchmark
// pallet
// --steps
// 10
// --template
// ./.maintain/template.hbs
// --repeat
// 20
// --extrinsic
// *
// --wasm-execution
// compiled
// --heap-pages
// 4096
// --pallet
// pallet_collator_staking
// --output
// ../pallet-collator-staking/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::{constants::RocksDbWeight, Weight}};

/// Weight functions needed for `pallet_collator_staking`.
pub trait WeightInfo {
	fn set_invulnerables(b: u32, ) -> Weight;
	fn add_invulnerable(b: u32, ) -> Weight;
	fn remove_invulnerable(b: u32, ) -> Weight;
	fn set_desired_candidates() -> Weight;
	fn set_min_candidacy_bond() -> Weight;
	fn register_as_candidate() -> Weight;
	fn remove_worst_candidate() -> Weight;
	fn leave_intent() -> Weight;
	fn note_author() -> Weight;
	fn new_session(r: u32, c: u32, ) -> Weight;
	fn stake(c: u32, ) -> Weight;
	fn unstake_from() -> Weight;
	fn unstake_all(c: u32, ) -> Weight;
	fn release(c: u32, ) -> Weight;
	fn claim_rewards(c: u32) -> Weight;
	fn set_autocompound_percentage() -> Weight;
	fn set_collator_reward_percentage() -> Weight;
	fn set_extra_reward() -> Weight;
	fn set_minimum_stake() -> Weight;
	fn stop_extra_reward() -> Weight;
	fn top_up_extra_rewards() -> Weight;
	fn start_session() -> Weight;
	fn end_session(c: u32, ) -> Weight;
	fn update_candidacy_bond() -> Weight;
	fn lock() -> Weight;
	fn unlock() -> Weight;
}

/// Weights for `pallet_collator_staking` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
	impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `CollatorSelection::Candidates` (r:20 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:20 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::Invulnerables` (r:0 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 20]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `451 + b * (65 ±0)`
		//  Estimated: `1442 + b * (2540 ±0)`
		// Minimum execution time: 15_089_000 picoseconds.
		Weight::from_parts(11_574_527, 1442)
			// Standard Error: 19_270
			.saturating_add(Weight::from_parts(4_416_562, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 19]`.
	fn add_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `518 + b * (37 ±0)`
		//  Estimated: `3971 + b * (38 ±0)`
		// Minimum execution time: 16_572_000 picoseconds.
		Weight::from_parts(17_805_637, 3971)
			// Standard Error: 12_439
			.saturating_add(Weight::from_parts(120_537, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(b.into()))
	}
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 20]`.
	fn remove_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `246 + b * (20 ±0)`
		//  Estimated: `1886`
		// Minimum execution time: 10_819_000 picoseconds.
		Weight::from_parts(12_028_446, 1886)
			// Standard Error: 11_853
			.saturating_add(Weight::from_parts(42_563, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::DesiredCandidates` (r:0 w:1)
	/// Proof: `CollatorSelection::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_464_000 picoseconds.
		Weight::from_parts(4_641_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:0 w:1)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_min_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_665_000 picoseconds.
		Weight::from_parts(4_864_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn register_as_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `596`
		//  Estimated: `4752`
		// Minimum execution time: 48_195_000 picoseconds.
		Weight::from_parts(49_131_000, 4752)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorSelection::Candidates` (r:101 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:100 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_worst_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `12685`
		//  Estimated: `342190`
		// Minimum execution time: 651_829_000 picoseconds.
		Weight::from_parts(666_198_000, 342190)
			.saturating_add(T::DbWeight::get().reads(205_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn leave_intent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `556`
		//  Estimated: `4752`
		// Minimum execution time: 56_893_000 picoseconds.
		Weight::from_parts(57_714_000, 4752)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ProducedBlocks` (r:1 w:1)
	/// Proof: `CollatorSelection::ProducedBlocks` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::TotalBlocks` (r:1 w:1)
	/// Proof: `CollatorSelection::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `282`
		//  Estimated: `3505`
		// Minimum execution time: 9_559_000 picoseconds.
		Weight::from_parts(9_892_000, 3505)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:101 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:100 w:0)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:100 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::DesiredCandidates` (r:1 w:0)
	/// Proof: `CollatorSelection::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:89 w:89)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:89 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ReleaseQueues` (r:89 w:89)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 100]`.
	/// The range of component `c` is `[1, 100]`.
	fn new_session(r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `356 + c * (159 ±0) + r * (119 ±0)`
		//  Estimated: `3521 + c * (3412 ±0) + r * (3762 ±0)`
		// Minimum execution time: 27_582_000 picoseconds.
		Weight::from_parts(27_881_000, 3521)
			// Standard Error: 1_460_941
			.saturating_add(Weight::from_parts(26_770_679, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 3412).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(r.into()))
	}
	/// Storage: `CollatorSelection::UserStake` (r:1 w:1)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(158), added: 2633, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:5 w:5)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:5 w:5)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:1 w:0)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 5]`.
	fn stake(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `442 + c * (95 ±0)`
		//  Estimated: `4402 + c * (2567 ±0)`
		// Minimum execution time: 28_359_000 picoseconds.
		Weight::from_parts(15_399_882, 4402)
			// Standard Error: 53_482
			.saturating_add(Weight::from_parts(14_801_441, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
	}
	/// Storage: `CollatorSelection::UserStake` (r:1 w:1)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(158), added: 2633, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn unstake_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `641`
		//  Estimated: `3623`
		// Minimum execution time: 26_148_000 picoseconds.
		Weight::from_parts(27_352_000, 3623)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorSelection::UserStake` (r:1 w:1)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(158), added: 2633, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:5 w:5)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:5 w:5)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 5]`.
	fn unstake_all(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `462 + c * (181 ±0)`
		//  Estimated: `3623 + c * (2567 ±0)`
		// Minimum execution time: 25_993_000 picoseconds.
		Weight::from_parts(14_131_730, 3623)
			// Standard Error: 51_289
			.saturating_add(Weight::from_parts(12_829_015, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
	}
	/// Storage: `CollatorSelection::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 5]`.
	fn release(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `377 + c * (20 ±0)`
		//  Estimated: `4752`
		// Minimum execution time: 27_712_000 picoseconds.
		Weight::from_parts(28_324_500, 4752)
			// Standard Error: 18_970
			.saturating_add(Weight::from_parts(150_150, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorSelection::UserStake` (r:1 w:1)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(158), added: 2633, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:5 w:5)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::PerSessionRewards` (r:367 w:0)
	/// Proof: `CollatorSelection::PerSessionRewards` (`max_values`: None, `max_size`: Some(5238), added: 7713, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorSelection::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::AutoCompound` (r:1 w:0)
	/// Proof: `CollatorSelection::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:5 w:5)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:1 w:0)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 5]`.
	/// The range of component `r` is `[1, 365]`.
	fn claim_rewards(c: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2313 + c * (307 ±0) + r * (5245 ±0)`
		//  Estimated: `16416 + c * (2567 ±0) + r * (7713 ±0)`
		// Minimum execution time: 210_683_000 picoseconds.
		Weight::from_parts(214_170_000, 16416)
			// Standard Error: 2_908_047
			.saturating_add(Weight::from_parts(25_905_757, 0).saturating_mul(c.into()))
			// Standard Error: 39_723
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
	}
	/// Storage: `CollatorSelection::UserStake` (r:1 w:0)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(158), added: 2633, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::AutoCompound` (r:0 w:1)
	/// Proof: `CollatorSelection::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	fn set_autocompound_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `405`
		//  Estimated: `3623`
		// Minimum execution time: 16_521_000 picoseconds.
		Weight::from_parts(16_868_000, 3623)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::CollatorRewardPercentage` (r:0 w:1)
	/// Proof: `CollatorSelection::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_collator_reward_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_175_000 picoseconds.
		Weight::from_parts(5_323_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::ExtraReward` (r:0 w:1)
	/// Proof: `CollatorSelection::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_287_000 picoseconds.
		Weight::from_parts(5_369_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:0 w:1)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_minimum_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `301`
		//  Estimated: `1501`
		// Minimum execution time: 9_797_000 picoseconds.
		Weight::from_parts(10_292_000, 1501)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::ExtraReward` (r:1 w:1)
	/// Proof: `CollatorSelection::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn stop_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `346`
		//  Estimated: `3581`
		// Minimum execution time: 14_671_000 picoseconds.
		Weight::from_parts(15_164_000, 3581)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn top_up_extra_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3581`
		// Minimum execution time: 43_662_000 picoseconds.
		Weight::from_parts(44_289_000, 3581)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::TotalBlocks` (r:0 w:1)
	/// Proof: `CollatorSelection::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CurrentSession` (r:0 w:1)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn start_session() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_799_000 picoseconds.
		Weight::from_parts(1_944_000, 0)
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorSelection::ExtraReward` (r:1 w:0)
	/// Proof: `CollatorSelection::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CounterForPerSessionRewards` (r:1 w:1)
	/// Proof: `CollatorSelection::CounterForPerSessionRewards` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorSelection::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:101 w:101)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::TotalBlocks` (r:1 w:0)
	/// Proof: `CollatorSelection::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CollatorRewardPercentage` (r:1 w:0)
	/// Proof: `CollatorSelection::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ProducedBlocks` (r:101 w:100)
	/// Proof: `CollatorSelection::ProducedBlocks` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:100 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::PerSessionRewards` (r:1 w:1)
	/// Proof: `CollatorSelection::PerSessionRewards` (`max_values`: None, `max_size`: Some(5238), added: 7713, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn end_session(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `543 + c * (262 ±0)`
		//  Estimated: `8703 + c * (2591 ±0)`
		// Minimum execution time: 73_652_000 picoseconds.
		Weight::from_parts(92_373_289, 8703)
			// Standard Error: 201_687
			.saturating_add(Weight::from_parts(51_099_263, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(c.into()))
	}
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn update_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `548`
		//  Estimated: `4752`
		// Minimum execution time: 48_607_000 picoseconds.
		Weight::from_parts(49_866_000, 4752)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `4752`
		// Minimum execution time: 35_005_000 picoseconds.
		Weight::from_parts(35_477_000, 4752)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::UserStake` (r:1 w:0)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(158), added: 2633, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `314`
		//  Estimated: `4752`
		// Minimum execution time: 53_448_000 picoseconds.
		Weight::from_parts(54_478_000, 4752)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `CollatorSelection::Candidates` (r:20 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:20 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::Invulnerables` (r:0 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 20]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `451 + b * (65 ±0)`
		//  Estimated: `1442 + b * (2540 ±0)`
		// Minimum execution time: 15_089_000 picoseconds.
		Weight::from_parts(11_574_527, 1442)
			// Standard Error: 19_270
			.saturating_add(Weight::from_parts(4_416_562, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 19]`.
	fn add_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `518 + b * (37 ±0)`
		//  Estimated: `3971 + b * (38 ±0)`
		// Minimum execution time: 16_572_000 picoseconds.
		Weight::from_parts(17_805_637, 3971)
			// Standard Error: 12_439
			.saturating_add(Weight::from_parts(120_537, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(b.into()))
	}
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 20]`.
	fn remove_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `246 + b * (20 ±0)`
		//  Estimated: `1886`
		// Minimum execution time: 10_819_000 picoseconds.
		Weight::from_parts(12_028_446, 1886)
			// Standard Error: 11_853
			.saturating_add(Weight::from_parts(42_563, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::DesiredCandidates` (r:0 w:1)
	/// Proof: `CollatorSelection::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_464_000 picoseconds.
		Weight::from_parts(4_641_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:0 w:1)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_min_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_665_000 picoseconds.
		Weight::from_parts(4_864_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn register_as_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `596`
		//  Estimated: `4752`
		// Minimum execution time: 48_195_000 picoseconds.
		Weight::from_parts(49_131_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorSelection::Candidates` (r:101 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:100 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_worst_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `12685`
		//  Estimated: `342190`
		// Minimum execution time: 651_829_000 picoseconds.
		Weight::from_parts(666_198_000, 342190)
			.saturating_add(RocksDbWeight::get().reads(205_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn leave_intent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `556`
		//  Estimated: `4752`
		// Minimum execution time: 56_893_000 picoseconds.
		Weight::from_parts(57_714_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ProducedBlocks` (r:1 w:1)
	/// Proof: `CollatorSelection::ProducedBlocks` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::TotalBlocks` (r:1 w:1)
	/// Proof: `CollatorSelection::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `282`
		//  Estimated: `3505`
		// Minimum execution time: 9_559_000 picoseconds.
		Weight::from_parts(9_892_000, 3505)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:101 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:100 w:0)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:100 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::DesiredCandidates` (r:1 w:0)
	/// Proof: `CollatorSelection::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:89 w:89)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:89 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ReleaseQueues` (r:89 w:89)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 100]`.
	/// The range of component `c` is `[1, 100]`.
	fn new_session(r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `356 + c * (159 ±0) + r * (119 ±0)`
		//  Estimated: `3521 + c * (3412 ±0) + r * (3762 ±0)`
		// Minimum execution time: 27_582_000 picoseconds.
		Weight::from_parts(27_881_000, 3521)
			// Standard Error: 1_460_941
			.saturating_add(Weight::from_parts(26_770_679, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 3412).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(r.into()))
	}
	/// Storage: `CollatorSelection::UserStake` (r:1 w:1)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(158), added: 2633, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:5 w:5)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:5 w:5)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:1 w:0)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 5]`.
	fn stake(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `442 + c * (95 ±0)`
		//  Estimated: `4402 + c * (2567 ±0)`
		// Minimum execution time: 28_359_000 picoseconds.
		Weight::from_parts(15_399_882, 4402)
			// Standard Error: 53_482
			.saturating_add(Weight::from_parts(14_801_441, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
	}
	/// Storage: `CollatorSelection::UserStake` (r:1 w:1)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(158), added: 2633, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn unstake_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `641`
		//  Estimated: `3623`
		// Minimum execution time: 26_148_000 picoseconds.
		Weight::from_parts(27_352_000, 3623)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorSelection::UserStake` (r:1 w:1)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(158), added: 2633, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:5 w:5)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:5 w:5)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 5]`.
	fn unstake_all(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `462 + c * (181 ±0)`
		//  Estimated: `3623 + c * (2567 ±0)`
		// Minimum execution time: 25_993_000 picoseconds.
		Weight::from_parts(14_131_730, 3623)
			// Standard Error: 51_289
			.saturating_add(Weight::from_parts(12_829_015, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
	}
	/// Storage: `CollatorSelection::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 5]`.
	fn release(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `377 + c * (20 ±0)`
		//  Estimated: `4752`
		// Minimum execution time: 27_712_000 picoseconds.
		Weight::from_parts(28_324_500, 4752)
			// Standard Error: 18_970
			.saturating_add(Weight::from_parts(150_150, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorSelection::UserStake` (r:1 w:1)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(158), added: 2633, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:5 w:5)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::PerSessionRewards` (r:367 w:0)
	/// Proof: `CollatorSelection::PerSessionRewards` (`max_values`: None, `max_size`: Some(5238), added: 7713, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorSelection::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::AutoCompound` (r:1 w:0)
	/// Proof: `CollatorSelection::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:5 w:5)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:1 w:0)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 5]`.
	/// The range of component `r` is `[1, 365]`.
	fn claim_rewards(c: u32) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2313 + c * (307 ±0) + r * (5245 ±0)`
		//  Estimated: `16416 + c * (2567 ±0) + r * (7713 ±0)`
		// Minimum execution time: 210_683_000 picoseconds.
		Weight::from_parts(214_170_000, 16416)
			// Standard Error: 2_908_047
			.saturating_add(Weight::from_parts(25_905_757, 0).saturating_mul(c.into()))
			// Standard Error: 39_723
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
	}
	/// Storage: `CollatorSelection::UserStake` (r:1 w:0)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(158), added: 2633, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::AutoCompound` (r:0 w:1)
	/// Proof: `CollatorSelection::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	fn set_autocompound_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `405`
		//  Estimated: `3623`
		// Minimum execution time: 16_521_000 picoseconds.
		Weight::from_parts(16_868_000, 3623)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::CollatorRewardPercentage` (r:0 w:1)
	/// Proof: `CollatorSelection::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_collator_reward_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_175_000 picoseconds.
		Weight::from_parts(5_323_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::ExtraReward` (r:0 w:1)
	/// Proof: `CollatorSelection::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_287_000 picoseconds.
		Weight::from_parts(5_369_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:0 w:1)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_minimum_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `301`
		//  Estimated: `1501`
		// Minimum execution time: 9_797_000 picoseconds.
		Weight::from_parts(10_292_000, 1501)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::ExtraReward` (r:1 w:1)
	/// Proof: `CollatorSelection::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn stop_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `346`
		//  Estimated: `3581`
		// Minimum execution time: 14_671_000 picoseconds.
		Weight::from_parts(15_164_000, 3581)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn top_up_extra_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3581`
		// Minimum execution time: 43_662_000 picoseconds.
		Weight::from_parts(44_289_000, 3581)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::TotalBlocks` (r:0 w:1)
	/// Proof: `CollatorSelection::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CurrentSession` (r:0 w:1)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn start_session() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_799_000 picoseconds.
		Weight::from_parts(1_944_000, 0)
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorSelection::ExtraReward` (r:1 w:0)
	/// Proof: `CollatorSelection::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CounterForPerSessionRewards` (r:1 w:1)
	/// Proof: `CollatorSelection::CounterForPerSessionRewards` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorSelection::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:101 w:101)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::TotalBlocks` (r:1 w:0)
	/// Proof: `CollatorSelection::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CollatorRewardPercentage` (r:1 w:0)
	/// Proof: `CollatorSelection::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ProducedBlocks` (r:101 w:100)
	/// Proof: `CollatorSelection::ProducedBlocks` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:100 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::PerSessionRewards` (r:1 w:1)
	/// Proof: `CollatorSelection::PerSessionRewards` (`max_values`: None, `max_size`: Some(5238), added: 7713, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn end_session(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `543 + c * (262 ±0)`
		//  Estimated: `8703 + c * (2591 ±0)`
		// Minimum execution time: 73_652_000 picoseconds.
		Weight::from_parts(92_373_289, 8703)
			// Standard Error: 201_687
			.saturating_add(Weight::from_parts(51_099_263, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(c.into()))
	}
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn update_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `548`
		//  Estimated: `4752`
		// Minimum execution time: 48_607_000 picoseconds.
		Weight::from_parts(49_866_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `4752`
		// Minimum execution time: 35_005_000 picoseconds.
		Weight::from_parts(35_477_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::UserStake` (r:1 w:0)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(158), added: 2633, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `314`
		//  Estimated: `4752`
		// Minimum execution time: 53_448_000 picoseconds.
		Weight::from_parts(54_478_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
