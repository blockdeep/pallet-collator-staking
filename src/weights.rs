
//! Autogenerated weights for `pallet_collator_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-04-25, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `blockdeep-ref-hw`, CPU: `AMD EPYC 7232P 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("local-v")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/mythos-node
// benchmark
// pallet
// --chain
// local-v
// --pallet
// pallet_collator_staking
// --extrinsic
// *
// --wasm-execution
// compiled
// --steps
// 50
// --repeat
// 20
// --output
// ./runtime/testnet/src/weights/pallet_collator_staking.rs
// --template
// .maintain/template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_collator_staking`.
pub trait WeightInfo {
	fn set_invulnerables(b: u32, ) -> Weight;
	fn add_invulnerable(b: u32, ) -> Weight;
	fn remove_invulnerable(b: u32, ) -> Weight;
	fn set_desired_candidates() -> Weight;
	fn set_min_candidacy_bond() -> Weight;
	fn register_as_candidate() -> Weight;
	fn remove_worst_candidate() -> Weight;
	fn leave_intent() -> Weight;
	fn note_author() -> Weight;
	fn new_session(r: u32, c: u32, ) -> Weight;
	fn stake(c: u32, ) -> Weight;
	fn unstake_from() -> Weight;
	fn unstake_all(c: u32, ) -> Weight;
	fn release(c: u32, ) -> Weight;
	fn claim_rewards(c: u32, ) -> Weight;
	fn set_autocompound() -> Weight;
	fn set_collator_reward_percentage() -> Weight;
	fn set_extra_reward() -> Weight;
	fn set_minimum_stake() -> Weight;
	fn stop_extra_reward() -> Weight;
	fn top_up_extra_rewards() -> Weight;
	fn start_session() -> Weight;
	fn end_session(c: u32, ) -> Weight;
	fn update_candidacy_bond() -> Weight;
	fn lock() -> Weight;
	fn unlock() -> Weight;
	fn migration_from_v1_to_v2_migrate_stake_step() -> Weight;
	fn migration_from_v1_to_v2_migrate_autocompound_step() -> Weight;
	fn migration_from_v1_to_v2_migrate_release_queue(l: u32, ) -> Weight;
	fn migration_from_v1_to_v2_migrate_candidacy_bond() -> Weight;
	fn migration_from_v1_to_v2_migrate_candidacy_bond_release() -> Weight;
}

/// Weights for `pallet_collator_staking` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
	impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `CollatorStaking::Candidates` (r:4 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:4 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:0 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(81), added: 576, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 4]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `427 + b * (64 ±0)`
		//  Estimated: `1489 + b * (2539 ±0)`
		// Minimum execution time: 33_340_000 picoseconds.
		Weight::from_parts(21_880_675, 1489)
			// Standard Error: 22_807
			.saturating_add(Weight::from_parts(6_220_627, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2539).saturating_mul(b.into()))
	}
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(81), added: 576, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 3]`.
	fn add_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `467 + b * (22 ±0)`
		//  Estimated: `3928 + b * (25 ±0)`
		// Minimum execution time: 24_171_000 picoseconds.
		Weight::from_parts(22_825_869, 3928)
			// Standard Error: 27_591
			.saturating_add(Weight::from_parts(2_365_483, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 25).saturating_mul(b.into()))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(81), added: 576, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[3, 4]`.
	fn remove_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `208 + b * (21 ±0)`
		//  Estimated: `1566`
		// Minimum execution time: 15_960_000 picoseconds.
		Weight::from_parts(16_686_471, 1566)
			// Standard Error: 58_816
			.saturating_add(Weight::from_parts(83_157, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(81), added: 576, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::DesiredCandidates` (r:0 w:1)
	/// Proof: `CollatorStaking::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248`
		//  Estimated: `1566`
		// Minimum execution time: 12_400_000 picoseconds.
		Weight::from_parts(12_950_000, 1566)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:0 w:1)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_min_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_930_000 picoseconds.
		Weight::from_parts(7_240_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(81), added: 576, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:1 w:0)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidacyBondReleases` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidacyBondReleases` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:1)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::SessionRemovedCandidates` (r:0 w:1)
	/// Proof: `CollatorStaking::SessionRemovedCandidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn register_as_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `563`
		//  Estimated: `4752`
		// Minimum execution time: 76_780_000 picoseconds.
		Weight::from_parts(78_671_000, 4752)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `CollatorStaking::Candidates` (r:16 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:15 w:1)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidacyBondReleases` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidacyBondReleases` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::SessionRemovedCandidates` (r:0 w:1)
	/// Proof: `CollatorStaking::SessionRemovedCandidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn remove_worst_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2416`
		//  Estimated: `41486`
		// Minimum execution time: 163_671_000 picoseconds.
		Weight::from_parts(165_731_000, 41486)
			.saturating_add(T::DbWeight::get().reads(33_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(81), added: 576, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidacyBondReleases` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidacyBondReleases` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:1)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::SessionRemovedCandidates` (r:0 w:1)
	/// Proof: `CollatorStaking::SessionRemovedCandidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn leave_intent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `528`
		//  Estimated: `3533`
		// Minimum execution time: 43_580_000 picoseconds.
		Weight::from_parts(44_660_000, 3533)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(81), added: 576, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ProducedBlocks` (r:1 w:1)
	/// Proof: `CollatorStaking::ProducedBlocks` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::TotalBlocks` (r:1 w:1)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248`
		//  Estimated: `3505`
		// Minimum execution time: 13_240_000 picoseconds.
		Weight::from_parts(13_730_000, 3505)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:16 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:15 w:0)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:15 w:0)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(81), added: 576, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::DesiredCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidacyBondReleases` (r:14 w:14)
	/// Proof: `CollatorStaking::CandidacyBondReleases` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::SessionRemovedCandidates` (r:0 w:14)
	/// Proof: `CollatorStaking::SessionRemovedCandidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 15]`.
	/// The range of component `c` is `[1, 15]`.
	fn new_session(r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `385 + c * (173 ±0)`
		//  Estimated: `3522 + c * (2543 ±0) + r * (2532 ±0)`
		// Minimum execution time: 45_980_000 picoseconds.
		Weight::from_parts(47_230_000, 3522)
			// Standard Error: 260_218
			.saturating_add(Weight::from_parts(23_402_759, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2543).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 2532).saturating_mul(r.into()))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:0)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:3 w:3)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:3 w:3)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Counters` (r:3 w:0)
	/// Proof: `CollatorStaking::Counters` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 3]`.
	fn stake(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `495 + c * (97 ±0)`
		//  Estimated: `4402 + c * (2579 ±0)`
		// Minimum execution time: 49_780_000 picoseconds.
		Weight::from_parts(26_765_184, 4402)
			// Standard Error: 47_044
			.saturating_add(Weight::from_parts(24_926_075, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2579).saturating_mul(c.into()))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn unstake_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `653`
		//  Estimated: `3604`
		// Minimum execution time: 42_371_000 picoseconds.
		Weight::from_parts(43_441_000, 3604)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:3 w:3)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:3 w:3)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 3]`.
	fn unstake_all(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `453 + c * (200 ±0)`
		//  Estimated: `3604 + c * (2579 ±0)`
		// Minimum execution time: 41_760_000 picoseconds.
		Weight::from_parts(25_613_345, 3604)
			// Standard Error: 47_571
			.saturating_add(Weight::from_parts(18_210_540, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2579).saturating_mul(c.into()))
	}
	/// Storage: `CollatorStaking::CandidacyBondReleases` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidacyBondReleases` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:1)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 3]`.
	fn release(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `614 + c * (21 ±0)`
		//  Estimated: `4752`
		// Minimum execution time: 74_100_000 picoseconds.
		Weight::from_parts(75_420_910, 4752)
			// Standard Error: 21_307
			.saturating_add(Weight::from_parts(253_143, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Counters` (r:3 w:0)
	/// Proof: `CollatorStaking::Counters` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:3 w:3)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompoundSettings` (r:1 w:0)
	/// Proof: `CollatorStaking::AutoCompoundSettings` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:0)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:3 w:3)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 3]`.
	fn claim_rewards(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2169 + c * (224 ±0)`
		//  Estimated: `6172 + c * (2579 ±0)`
		// Minimum execution time: 155_921_000 picoseconds.
		Weight::from_parts(125_930_284, 6172)
			// Standard Error: 82_698
			.saturating_add(Weight::from_parts(32_900_216, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2579).saturating_mul(c.into()))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:0)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompoundSettings` (r:1 w:2)
	/// Proof: `CollatorStaking::AutoCompoundSettings` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::NextSystemOperation` (r:1 w:0)
	/// Proof: `CollatorStaking::NextSystemOperation` (`max_values`: Some(1), `max_size`: Some(22), added: 517, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:0)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn set_autocompound() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `561`
		//  Estimated: `4402`
		// Minimum execution time: 39_590_000 picoseconds.
		Weight::from_parts(40_260_000, 4402)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorStaking::CollatorRewardPercentage` (r:0 w:1)
	/// Proof: `CollatorStaking::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_collator_reward_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_790_000 picoseconds.
		Weight::from_parts(7_100_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:0 w:1)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_760_000 picoseconds.
		Weight::from_parts(7_200_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:0 w:1)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_minimum_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `267`
		//  Estimated: `1501`
		// Minimum execution time: 13_850_000 picoseconds.
		Weight::from_parts(14_530_000, 1501)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:1 w:1)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn stop_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `440`
		//  Estimated: `6172`
		// Minimum execution time: 65_980_000 picoseconds.
		Weight::from_parts(66_900_000, 6172)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn top_up_extra_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3581`
		// Minimum execution time: 48_080_000 picoseconds.
		Weight::from_parts(48_660_000, 3581)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::TotalBlocks` (r:0 w:1)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:0 w:1)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn start_session() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_240_000 picoseconds.
		Weight::from_parts(2_380_000, 0)
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:1 w:0)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:16 w:16)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::TotalBlocks` (r:1 w:0)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ProducedBlocks` (r:16 w:15)
	/// Proof: `CollatorStaking::ProducedBlocks` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CollatorRewardPercentage` (r:1 w:0)
	/// Proof: `CollatorStaking::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:15 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Counters` (r:15 w:15)
	/// Proof: `CollatorStaking::Counters` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::NextSystemOperation` (r:0 w:1)
	/// Proof: `CollatorStaking::NextSystemOperation` (`max_values`: Some(1), `max_size`: Some(22), added: 517, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 15]`.
	fn end_session(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `424 + c * (245 ±0)`
		//  Estimated: `3581 + c * (2591 ±0)`
		// Minimum execution time: 85_160_000 picoseconds.
		Weight::from_parts(33_591_380, 3581)
			// Standard Error: 38_597
			.saturating_add(Weight::from_parts(53_049_762, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(c.into()))
	}
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:1)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn update_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `604`
		//  Estimated: `4752`
		// Minimum execution time: 53_661_000 picoseconds.
		Weight::from_parts(54_680_000, 4752)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `4752`
		// Minimum execution time: 30_200_000 picoseconds.
		Weight::from_parts(30_990_000, 4752)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:1)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompoundSettings` (r:1 w:2)
	/// Proof: `CollatorStaking::AutoCompoundSettings` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::NextSystemOperation` (r:1 w:0)
	/// Proof: `CollatorStaking::NextSystemOperation` (`max_values`: Some(1), `max_size`: Some(22), added: 517, mode: `MaxEncodedLen`)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `293`
		//  Estimated: `4402`
		// Minimum execution time: 45_251_000 picoseconds.
		Weight::from_parts(46_250_000, 4402)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `CollatorStaking::CandidateStake` (r:2 w:1)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	fn migration_from_v1_to_v2_migrate_stake_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `379`
		//  Estimated: `6148`
		// Minimum execution time: 14_870_000 picoseconds.
		Weight::from_parts(15_440_000, 6148)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: UNKNOWN KEY `0x9be9fcabb244dd97c71ed3c522b2bc78518e15d6e94ec512829bd0562fe6b99d` (r:2 w:1)
	/// Proof: UNKNOWN KEY `0x9be9fcabb244dd97c71ed3c522b2bc78518e15d6e94ec512829bd0562fe6b99d` (r:2 w:1)
	/// Storage: `CollatorStaking::AutoCompoundSettings` (r:0 w:1)
	/// Proof: `CollatorStaking::AutoCompoundSettings` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	fn migration_from_v1_to_v2_migrate_autocompound_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `297`
		//  Estimated: `6237`
		// Minimum execution time: 15_410_000 picoseconds.
		Weight::from_parts(15_760_000, 6237)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorStaking::ReleaseQueues` (r:2 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[1, 3]`.
	fn migration_from_v1_to_v2_migrate_release_queue(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `284 + l * (21 ±0)`
		//  Estimated: `6134`
		// Minimum execution time: 32_240_000 picoseconds.
		Weight::from_parts(32_831_812, 6134)
			// Standard Error: 18_348
			.saturating_add(Weight::from_parts(450_077, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorStaking::Candidates` (r:2 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:1)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn migration_from_v1_to_v2_migrate_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `555`
		//  Estimated: `6052`
		// Minimum execution time: 66_770_000 picoseconds.
		Weight::from_parts(67_551_000, 6052)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorStaking::CandidacyBondReleases` (r:2 w:1)
	/// Proof: `CollatorStaking::CandidacyBondReleases` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn migration_from_v1_to_v2_migrate_candidacy_bond_release() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `516`
		//  Estimated: `6054`
		// Minimum execution time: 38_531_000 picoseconds.
		Weight::from_parts(39_411_000, 6054)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `CollatorStaking::Candidates` (r:4 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:4 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:0 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(81), added: 576, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 4]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `427 + b * (64 ±0)`
		//  Estimated: `1489 + b * (2539 ±0)`
		// Minimum execution time: 33_340_000 picoseconds.
		Weight::from_parts(21_880_675, 1489)
			// Standard Error: 22_807
			.saturating_add(Weight::from_parts(6_220_627, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2539).saturating_mul(b.into()))
	}
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(81), added: 576, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 3]`.
	fn add_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `467 + b * (22 ±0)`
		//  Estimated: `3928 + b * (25 ±0)`
		// Minimum execution time: 24_171_000 picoseconds.
		Weight::from_parts(22_825_869, 3928)
			// Standard Error: 27_591
			.saturating_add(Weight::from_parts(2_365_483, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 25).saturating_mul(b.into()))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(81), added: 576, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[3, 4]`.
	fn remove_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `208 + b * (21 ±0)`
		//  Estimated: `1566`
		// Minimum execution time: 15_960_000 picoseconds.
		Weight::from_parts(16_686_471, 1566)
			// Standard Error: 58_816
			.saturating_add(Weight::from_parts(83_157, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(81), added: 576, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::DesiredCandidates` (r:0 w:1)
	/// Proof: `CollatorStaking::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248`
		//  Estimated: `1566`
		// Minimum execution time: 12_400_000 picoseconds.
		Weight::from_parts(12_950_000, 1566)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:0 w:1)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_min_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_930_000 picoseconds.
		Weight::from_parts(7_240_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(81), added: 576, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:1 w:0)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidacyBondReleases` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidacyBondReleases` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:1)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::SessionRemovedCandidates` (r:0 w:1)
	/// Proof: `CollatorStaking::SessionRemovedCandidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn register_as_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `563`
		//  Estimated: `4752`
		// Minimum execution time: 76_780_000 picoseconds.
		Weight::from_parts(78_671_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `CollatorStaking::Candidates` (r:16 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:15 w:1)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidacyBondReleases` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidacyBondReleases` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::SessionRemovedCandidates` (r:0 w:1)
	/// Proof: `CollatorStaking::SessionRemovedCandidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn remove_worst_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2416`
		//  Estimated: `41486`
		// Minimum execution time: 163_671_000 picoseconds.
		Weight::from_parts(165_731_000, 41486)
			.saturating_add(RocksDbWeight::get().reads(33_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(81), added: 576, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidacyBondReleases` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidacyBondReleases` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:1)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::SessionRemovedCandidates` (r:0 w:1)
	/// Proof: `CollatorStaking::SessionRemovedCandidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn leave_intent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `528`
		//  Estimated: `3533`
		// Minimum execution time: 43_580_000 picoseconds.
		Weight::from_parts(44_660_000, 3533)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(81), added: 576, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ProducedBlocks` (r:1 w:1)
	/// Proof: `CollatorStaking::ProducedBlocks` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::TotalBlocks` (r:1 w:1)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248`
		//  Estimated: `3505`
		// Minimum execution time: 13_240_000 picoseconds.
		Weight::from_parts(13_730_000, 3505)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:16 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:15 w:0)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:15 w:0)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(81), added: 576, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::DesiredCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidacyBondReleases` (r:14 w:14)
	/// Proof: `CollatorStaking::CandidacyBondReleases` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::SessionRemovedCandidates` (r:0 w:14)
	/// Proof: `CollatorStaking::SessionRemovedCandidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 15]`.
	/// The range of component `c` is `[1, 15]`.
	fn new_session(r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `385 + c * (173 ±0)`
		//  Estimated: `3522 + c * (2543 ±0) + r * (2532 ±0)`
		// Minimum execution time: 45_980_000 picoseconds.
		Weight::from_parts(47_230_000, 3522)
			// Standard Error: 260_218
			.saturating_add(Weight::from_parts(23_402_759, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2543).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 2532).saturating_mul(r.into()))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:0)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:3 w:3)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:3 w:3)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Counters` (r:3 w:0)
	/// Proof: `CollatorStaking::Counters` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 3]`.
	fn stake(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `495 + c * (97 ±0)`
		//  Estimated: `4402 + c * (2579 ±0)`
		// Minimum execution time: 49_780_000 picoseconds.
		Weight::from_parts(26_765_184, 4402)
			// Standard Error: 47_044
			.saturating_add(Weight::from_parts(24_926_075, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2579).saturating_mul(c.into()))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn unstake_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `653`
		//  Estimated: `3604`
		// Minimum execution time: 42_371_000 picoseconds.
		Weight::from_parts(43_441_000, 3604)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:3 w:3)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:3 w:3)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 3]`.
	fn unstake_all(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `453 + c * (200 ±0)`
		//  Estimated: `3604 + c * (2579 ±0)`
		// Minimum execution time: 41_760_000 picoseconds.
		Weight::from_parts(25_613_345, 3604)
			// Standard Error: 47_571
			.saturating_add(Weight::from_parts(18_210_540, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2579).saturating_mul(c.into()))
	}
	/// Storage: `CollatorStaking::CandidacyBondReleases` (r:1 w:1)
	/// Proof: `CollatorStaking::CandidacyBondReleases` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:1)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 3]`.
	fn release(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `614 + c * (21 ±0)`
		//  Estimated: `4752`
		// Minimum execution time: 74_100_000 picoseconds.
		Weight::from_parts(75_420_910, 4752)
			// Standard Error: 21_307
			.saturating_add(Weight::from_parts(253_143, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Counters` (r:3 w:0)
	/// Proof: `CollatorStaking::Counters` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:3 w:3)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompoundSettings` (r:1 w:0)
	/// Proof: `CollatorStaking::AutoCompoundSettings` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:0)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:3 w:3)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 3]`.
	fn claim_rewards(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2169 + c * (224 ±0)`
		//  Estimated: `6172 + c * (2579 ±0)`
		// Minimum execution time: 155_921_000 picoseconds.
		Weight::from_parts(125_930_284, 6172)
			// Standard Error: 82_698
			.saturating_add(Weight::from_parts(32_900_216, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2579).saturating_mul(c.into()))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:0)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompoundSettings` (r:1 w:2)
	/// Proof: `CollatorStaking::AutoCompoundSettings` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::NextSystemOperation` (r:1 w:0)
	/// Proof: `CollatorStaking::NextSystemOperation` (`max_values`: Some(1), `max_size`: Some(22), added: 517, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:0)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn set_autocompound() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `561`
		//  Estimated: `4402`
		// Minimum execution time: 39_590_000 picoseconds.
		Weight::from_parts(40_260_000, 4402)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorStaking::CollatorRewardPercentage` (r:0 w:1)
	/// Proof: `CollatorStaking::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_collator_reward_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_790_000 picoseconds.
		Weight::from_parts(7_100_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:0 w:1)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_760_000 picoseconds.
		Weight::from_parts(7_200_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:0 w:1)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_minimum_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `267`
		//  Estimated: `1501`
		// Minimum execution time: 13_850_000 picoseconds.
		Weight::from_parts(14_530_000, 1501)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:1 w:1)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn stop_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `440`
		//  Estimated: `6172`
		// Minimum execution time: 65_980_000 picoseconds.
		Weight::from_parts(66_900_000, 6172)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn top_up_extra_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3581`
		// Minimum execution time: 48_080_000 picoseconds.
		Weight::from_parts(48_660_000, 3581)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::TotalBlocks` (r:0 w:1)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:0 w:1)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn start_session() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_240_000 picoseconds.
		Weight::from_parts(2_380_000, 0)
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:1 w:0)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:16 w:16)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::TotalBlocks` (r:1 w:0)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ProducedBlocks` (r:16 w:15)
	/// Proof: `CollatorStaking::ProducedBlocks` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CollatorRewardPercentage` (r:1 w:0)
	/// Proof: `CollatorStaking::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:15 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Counters` (r:15 w:15)
	/// Proof: `CollatorStaking::Counters` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::NextSystemOperation` (r:0 w:1)
	/// Proof: `CollatorStaking::NextSystemOperation` (`max_values`: Some(1), `max_size`: Some(22), added: 517, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 15]`.
	fn end_session(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `424 + c * (245 ±0)`
		//  Estimated: `3581 + c * (2591 ±0)`
		// Minimum execution time: 85_160_000 picoseconds.
		Weight::from_parts(33_591_380, 3581)
			// Standard Error: 38_597
			.saturating_add(Weight::from_parts(53_049_762, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(c.into()))
	}
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:1)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn update_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `604`
		//  Estimated: `4752`
		// Minimum execution time: 53_661_000 picoseconds.
		Weight::from_parts(54_680_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `4752`
		// Minimum execution time: 30_200_000 picoseconds.
		Weight::from_parts(30_990_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:1)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompoundSettings` (r:1 w:2)
	/// Proof: `CollatorStaking::AutoCompoundSettings` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::NextSystemOperation` (r:1 w:0)
	/// Proof: `CollatorStaking::NextSystemOperation` (`max_values`: Some(1), `max_size`: Some(22), added: 517, mode: `MaxEncodedLen`)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `293`
		//  Estimated: `4402`
		// Minimum execution time: 45_251_000 picoseconds.
		Weight::from_parts(46_250_000, 4402)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `CollatorStaking::CandidateStake` (r:2 w:1)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	fn migration_from_v1_to_v2_migrate_stake_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `379`
		//  Estimated: `6148`
		// Minimum execution time: 14_870_000 picoseconds.
		Weight::from_parts(15_440_000, 6148)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: UNKNOWN KEY `0x9be9fcabb244dd97c71ed3c522b2bc78518e15d6e94ec512829bd0562fe6b99d` (r:2 w:1)
	/// Proof: UNKNOWN KEY `0x9be9fcabb244dd97c71ed3c522b2bc78518e15d6e94ec512829bd0562fe6b99d` (r:2 w:1)
	/// Storage: `CollatorStaking::AutoCompoundSettings` (r:0 w:1)
	/// Proof: `CollatorStaking::AutoCompoundSettings` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
	fn migration_from_v1_to_v2_migrate_autocompound_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `297`
		//  Estimated: `6237`
		// Minimum execution time: 15_410_000 picoseconds.
		Weight::from_parts(15_760_000, 6237)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorStaking::ReleaseQueues` (r:2 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[1, 3]`.
	fn migration_from_v1_to_v2_migrate_release_queue(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `284 + l * (21 ±0)`
		//  Estimated: `6134`
		// Minimum execution time: 32_240_000 picoseconds.
		Weight::from_parts(32_831_812, 6134)
			// Standard Error: 18_348
			.saturating_add(Weight::from_parts(450_077, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorStaking::Candidates` (r:2 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LockedBalances` (r:1 w:1)
	/// Proof: `CollatorStaking::LockedBalances` (`max_values`: None, `max_size`: Some(68), added: 2543, mode: `MaxEncodedLen`)
	fn migration_from_v1_to_v2_migrate_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `555`
		//  Estimated: `6052`
		// Minimum execution time: 66_770_000 picoseconds.
		Weight::from_parts(67_551_000, 6052)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorStaking::CandidacyBondReleases` (r:2 w:1)
	/// Proof: `CollatorStaking::CandidacyBondReleases` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn migration_from_v1_to_v2_migrate_candidacy_bond_release() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `516`
		//  Estimated: `6054`
		// Minimum execution time: 38_531_000 picoseconds.
		Weight::from_parts(39_411_000, 6054)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
