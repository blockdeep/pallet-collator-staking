
//! Autogenerated weights for `pallet_collator_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-08-15, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `PAR03651`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("local-v")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/mythos-node
// benchmark
// pallet
// --chain
// local-v
// --pallet
// pallet_collator_staking
// --extrinsic
// *
// --wasm-execution
// compiled
// --steps
// 50
// --repeat
// 20
// --output
// ./runtime/testnet/src/weights/pallet_collator_staking.rs
// --template
// ./.maintain/template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_collator_staking`.
pub trait WeightInfo {
	fn set_invulnerables(b: u32, ) -> Weight;
	fn add_invulnerable(b: u32, ) -> Weight;
	fn remove_invulnerable(b: u32, ) -> Weight;
	fn set_desired_candidates() -> Weight;
	fn set_min_candidacy_bond() -> Weight;
	fn register_as_candidate() -> Weight;
	fn remove_worst_candidate() -> Weight;
	fn leave_intent() -> Weight;
	fn note_author() -> Weight;
	fn new_session(r: u32, c: u32, ) -> Weight;
	fn stake(c: u32, ) -> Weight;
	fn unstake_from() -> Weight;
	fn unstake_all(s: u32, ) -> Weight;
	fn claim(c: u32, ) -> Weight;
	fn set_autocompound_percentage() -> Weight;
	fn set_collator_reward_percentage() -> Weight;
	fn set_extra_reward() -> Weight;
	fn set_minimum_stake() -> Weight;
	fn stop_extra_reward() -> Weight;
	fn top_up_extra_rewards() -> Weight;
	fn reward_one_collator(s: u32, a: u32, ) -> Weight;
	fn update_candidacy_bond() -> Weight;
	fn lock() -> Weight;
	fn unlock() -> Weight;
}

/// Weights for `pallet_collator_staking` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
	impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `CollatorSelection::Candidates` (r:20 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:20 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::Invulnerables` (r:0 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 20]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `441 + b * (65 ±0)`
		//  Estimated: `1431 + b * (2540 ±0)`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(8_766_450, 1431)
			// Standard Error: 12_576
			.saturating_add(Weight::from_parts(4_370_014, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 19]`.
	fn add_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `489 + b * (38 ±0)`
		//  Estimated: `3961 + b * (38 ±0)`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(15_704_268, 3961)
			// Standard Error: 17_138
			.saturating_add(Weight::from_parts(167_828, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(b.into()))
	}
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 20]`.
	fn remove_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `218 + b * (20 ±0)`
		//  Estimated: `1886`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_358_648, 1886)
			// Standard Error: 7_179
			.saturating_add(Weight::from_parts(106_592, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::DesiredCandidates` (r:0 w:1)
	/// Proof: `CollatorSelection::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:0 w:1)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_min_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn register_as_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `585`
		//  Estimated: `4752`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(41_000_000, 4752)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorSelection::Candidates` (r:101 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:100 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn remove_worst_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `12721`
		//  Estimated: `342190`
		// Minimum execution time: 612_000_000 picoseconds.
		Weight::from_parts(668_000_000, 342190)
			.saturating_add(T::DbWeight::get().reads(206_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn leave_intent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `577`
		//  Estimated: `4752`
		// Minimum execution time: 53_000_000 picoseconds.
		Weight::from_parts(54_000_000, 4752)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `CollatorSelection::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ProducedBlocks` (r:1 w:1)
	/// Proof: `CollatorSelection::ProducedBlocks` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::TotalBlocks` (r:1 w:1)
	/// Proof: `CollatorSelection::TotalBlocks` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `283`
		//  Estimated: `3525`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3525)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:101 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:100 w:0)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:100 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::DesiredCandidates` (r:1 w:0)
	/// Proof: `CollatorSelection::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:97 w:0)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:97 w:97)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:97 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ReleaseQueues` (r:97 w:97)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 100]`.
	/// The range of component `c` is `[1, 100]`.
	fn new_session(r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `308 + c * (159 ±0) + r * (121 ±0)`
		//  Estimated: `3521 + c * (3412 ±0) + r * (3762 ±0)`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(25_000_000, 3521)
			// Standard Error: 804_113
			.saturating_add(Weight::from_parts(31_501_820, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 3412).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(r.into()))
	}
	/// Storage: `CollatorSelection::UserStake` (r:1 w:1)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:16 w:16)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:16 w:16)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:1 w:0)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	fn stake(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `424 + c * (94 ±0)`
		//  Estimated: `4402 + c * (2567 ±0)`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(13_279_193, 4402)
			// Standard Error: 25_957
			.saturating_add(Weight::from_parts(13_140_000, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
	}
	/// Storage: `CollatorSelection::Candidates` (r:1 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::UserStake` (r:1 w:1)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn unstake_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `578`
		//  Estimated: `3557`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(18_000_000, 3557)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorSelection::Candidates` (r:17 w:16)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:16 w:16)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::UserStake` (r:1 w:1)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 16]`.
	fn unstake_all(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `435 + s * (160 ±0)`
		//  Estimated: `3521 + s * (2567 ±0)`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(9_920_674, 3521)
			// Standard Error: 27_173
			.saturating_add(Weight::from_parts(13_119_616, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(s.into()))
	}
	/// Storage: `CollatorSelection::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 16]`.
	fn claim(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `352 + c * (20 ±0)`
		//  Estimated: `4752`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(19_180_593, 4752)
			// Standard Error: 41_585
			.saturating_add(Weight::from_parts(496_729, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorSelection::AutoCompound` (r:0 w:1)
	/// Proof: `CollatorSelection::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	fn set_autocompound_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::CollatorRewardPercentage` (r:0 w:1)
	/// Proof: `CollatorSelection::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_collator_reward_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::ExtraReward` (r:0 w:1)
	/// Proof: `CollatorSelection::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:0 w:1)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_minimum_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `273`
		//  Estimated: `1501`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 1501)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::ExtraReward` (r:1 w:1)
	/// Proof: `CollatorSelection::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn stop_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `318`
		//  Estimated: `3581`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_000_000, 3581)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn top_up_extra_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3581`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(36_000_000, 3581)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::ProducedBlocks` (r:2 w:1)
	/// Proof: `CollatorSelection::ProducedBlocks` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::TotalBlocks` (r:1 w:0)
	/// Proof: `CollatorSelection::TotalBlocks` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Rewards` (r:1 w:0)
	/// Proof: `CollatorSelection::Rewards` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CollatorRewardPercentage` (r:1 w:0)
	/// Proof: `CollatorSelection::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:202 w:202)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:201 w:200)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::AutoCompound` (r:200 w:0)
	/// Proof: `CollatorSelection::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:200 w:200)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:200 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::UserStake` (r:200 w:0)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:1 w:0)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 200]`.
	/// The range of component `a` is `[0, 100]`.
	fn reward_one_collator(s: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + a * (237 ±0) + s * (348 ±0)`
		//  Estimated: `6172 + a * (2742 ±76) + s * (2591 ±38)`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(19_000_000, 6172)
			// Standard Error: 409_517
			.saturating_add(Weight::from_parts(49_885_350, 0).saturating_mul(s.into()))
			// Standard Error: 819_946
			.saturating_add(Weight::from_parts(26_385_316, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(Weight::from_parts(0, 2742).saturating_mul(a.into()))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(s.into()))
	}
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn update_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `521`
		//  Estimated: `4752`
		// Minimum execution time: 33_000_000 picoseconds.
		Weight::from_parts(34_000_000, 4752)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `4752`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(26_000_000, 4752)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::UserStake` (r:1 w:0)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `286`
		//  Estimated: `4752`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(37_000_000, 4752)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `CollatorSelection::Candidates` (r:20 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:20 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::Invulnerables` (r:0 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 20]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `441 + b * (65 ±0)`
		//  Estimated: `1431 + b * (2540 ±0)`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(8_766_450, 1431)
			// Standard Error: 12_576
			.saturating_add(Weight::from_parts(4_370_014, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 19]`.
	fn add_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `489 + b * (38 ±0)`
		//  Estimated: `3961 + b * (38 ±0)`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(15_704_268, 3961)
			// Standard Error: 17_138
			.saturating_add(Weight::from_parts(167_828, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(b.into()))
	}
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 20]`.
	fn remove_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `218 + b * (20 ±0)`
		//  Estimated: `1886`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_358_648, 1886)
			// Standard Error: 7_179
			.saturating_add(Weight::from_parts(106_592, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::DesiredCandidates` (r:0 w:1)
	/// Proof: `CollatorSelection::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:0 w:1)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_min_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn register_as_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `585`
		//  Estimated: `4752`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(41_000_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `CollatorSelection::Candidates` (r:101 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:100 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn remove_worst_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `12721`
		//  Estimated: `342190`
		// Minimum execution time: 612_000_000 picoseconds.
		Weight::from_parts(668_000_000, 342190)
			.saturating_add(RocksDbWeight::get().reads(206_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:1 w:0)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn leave_intent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `577`
		//  Estimated: `4752`
		// Minimum execution time: 53_000_000 picoseconds.
		Weight::from_parts(54_000_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `CollatorSelection::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ProducedBlocks` (r:1 w:1)
	/// Proof: `CollatorSelection::ProducedBlocks` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::TotalBlocks` (r:1 w:1)
	/// Proof: `CollatorSelection::TotalBlocks` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `283`
		//  Estimated: `3525`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3525)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:101 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::LastAuthoredBlock` (r:100 w:0)
	/// Proof: `CollatorSelection::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:100 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorSelection::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::DesiredCandidates` (r:1 w:0)
	/// Proof: `CollatorSelection::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:97 w:0)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:97 w:97)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:97 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ReleaseQueues` (r:97 w:97)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 100]`.
	/// The range of component `c` is `[1, 100]`.
	fn new_session(r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `308 + c * (159 ±0) + r * (121 ±0)`
		//  Estimated: `3521 + c * (3412 ±0) + r * (3762 ±0)`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(25_000_000, 3521)
			// Standard Error: 804_113
			.saturating_add(Weight::from_parts(31_501_820, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().reads((5_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 3412).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(r.into()))
	}
	/// Storage: `CollatorSelection::UserStake` (r:1 w:1)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:16 w:16)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:16 w:16)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:1 w:0)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorSelection::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorSelection::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	fn stake(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `424 + c * (94 ±0)`
		//  Estimated: `4402 + c * (2567 ±0)`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(13_279_193, 4402)
			// Standard Error: 25_957
			.saturating_add(Weight::from_parts(13_140_000, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
	}
	/// Storage: `CollatorSelection::Candidates` (r:1 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:1 w:1)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::UserStake` (r:1 w:1)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn unstake_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `578`
		//  Estimated: `3557`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(18_000_000, 3557)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `CollatorSelection::Candidates` (r:17 w:16)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:16 w:16)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::UserStake` (r:1 w:1)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 16]`.
	fn unstake_all(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `435 + s * (160 ±0)`
		//  Estimated: `3521 + s * (2567 ±0)`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(9_920_674, 3521)
			// Standard Error: 27_173
			.saturating_add(Weight::from_parts(13_119_616, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(s.into()))
	}
	/// Storage: `CollatorSelection::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 16]`.
	fn claim(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `352 + c * (20 ±0)`
		//  Estimated: `4752`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(19_180_593, 4752)
			// Standard Error: 41_585
			.saturating_add(Weight::from_parts(496_729, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `CollatorSelection::AutoCompound` (r:0 w:1)
	/// Proof: `CollatorSelection::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	fn set_autocompound_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::CollatorRewardPercentage` (r:0 w:1)
	/// Proof: `CollatorSelection::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_collator_reward_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::ExtraReward` (r:0 w:1)
	/// Proof: `CollatorSelection::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:0 w:1)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_minimum_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `273`
		//  Estimated: `1501`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 1501)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::ExtraReward` (r:1 w:1)
	/// Proof: `CollatorSelection::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn stop_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `318`
		//  Estimated: `3581`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_000_000, 3581)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn top_up_extra_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3581`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(36_000_000, 3581)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::ProducedBlocks` (r:2 w:1)
	/// Proof: `CollatorSelection::ProducedBlocks` (`max_values`: None, `max_size`: Some(60), added: 2535, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:1)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::TotalBlocks` (r:1 w:0)
	/// Proof: `CollatorSelection::TotalBlocks` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Rewards` (r:1 w:0)
	/// Proof: `CollatorSelection::Rewards` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CollatorRewardPercentage` (r:1 w:0)
	/// Proof: `CollatorSelection::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:202 w:202)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::CandidateStake` (r:201 w:200)
	/// Proof: `CollatorSelection::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::AutoCompound` (r:200 w:0)
	/// Proof: `CollatorSelection::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:200 w:200)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:200 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::UserStake` (r:200 w:0)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::MinStake` (r:1 w:0)
	/// Proof: `CollatorSelection::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 200]`.
	/// The range of component `a` is `[0, 100]`.
	fn reward_one_collator(s: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + a * (237 ±0) + s * (348 ±0)`
		//  Estimated: `6172 + a * (2742 ±76) + s * (2591 ±38)`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(19_000_000, 6172)
			// Standard Error: 409_517
			.saturating_add(Weight::from_parts(49_885_350, 0).saturating_mul(s.into()))
			// Standard Error: 819_946
			.saturating_add(Weight::from_parts(26_385_316, 0).saturating_mul(a.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(a.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(a.into())))
			.saturating_add(Weight::from_parts(0, 2742).saturating_mul(a.into()))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(s.into()))
	}
	/// Storage: `CollatorSelection::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorSelection::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::Candidates` (r:1 w:0)
	/// Proof: `CollatorSelection::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn update_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `521`
		//  Estimated: `4752`
		// Minimum execution time: 33_000_000 picoseconds.
		Weight::from_parts(34_000_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `4752`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(26_000_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `CollatorSelection::UserStake` (r:1 w:0)
	/// Proof: `CollatorSelection::UserStake` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorSelection::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorSelection::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `286`
		//  Estimated: `4752`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(37_000_000, 4752)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
